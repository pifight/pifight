# this file's name is the unique project's name
#

#
# BASIC SETUP
#

# If the watcher should test on every change (yes/no)
RUN_TESTS="yes"

# Which command to execute for testing
TEST_COMMAND="./test.sh"

# Which command to execute for releasing
RELEASE_COMMAND="./release.sh"

# Change to this user for the execution. Only usable as root!
# e.g. BUILD_USER="nobody"
BUILD_USER=""

# Change the root directory during the execution. Call this script
# to set up the environment. Only usable as root!
# e.g. CHROOT_SETUP="/usr/local/share/examples/genci/chroot-setup.sh"
CHROOT_SETUP=""


#
# HOOKS PRE
#

# vnc  - the vnc hook runs an X display during the build
#
#PRE="$PRE /usr/local/share/examples/genci/hooks/vnc.sh"
#
# vnc requires the DISPLAY variable to be set
#
#export DISPLAY=:30


#
# HOOKS POST
#

# vnc
#
#POST="$POST /usr/local/share/examples/genci/hooks/vnc.sh"

# artifacts  - collects build results
#
#POST="$POST /usr/local/share/examples/genci/hooks/artifacts.sh"
#
# artifacts requires a list of masks to search for
# e.g. "results/*.xml", "tests/*.txt doc/*"
#
#export ARTIFACTS="*.log *.tar.gz *.tgz *.deb"

# mail  - send mails on failure and recovery
#
#POST="$POST /usr/local/share/examples/genci/hooks/mail.sh"
#
# uncomment BOTH lines if you want the panic feature:
# the maximum numbers of fail-mails to go out; if this is
# exceeded, only one mail goes out to the PANIC_MAIL
#
#export MAIL_PANIC_LIMIT=10
#export MAIL_PANIC_MAIL=me@example.com
#
# a branch whitelist, to only send mails when the event
# happens on one of the following branches
#
#export MAIL_BRANCHES="master stable"


# cleanup  - delete the work directory to save space
#
#POST="$POST /usr/local/share/examples/genci/hooks/cleanup.sh"

